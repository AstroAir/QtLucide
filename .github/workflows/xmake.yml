name: XMake Build

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  workflow_dispatch:

permissions:
  contents: read
  actions: read

env:
  XMAKE_PARALLEL_JOBS: 4

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            mode: release
            qt-method: system
          - os: ubuntu-22.04
            mode: debug
            qt-method: system
          - os: windows-2022
            mode: release
            qt-method: action
            qt-version: '6.8.0'
          - os: windows-2022
            mode: debug
            qt-method: action
            qt-version: '6.8.0'
          - os: macos-14
            mode: release
            qt-method: brew
          - os: macos-13
            mode: debug
            qt-method: brew

    runs-on: ${{ matrix.os }}

    steps:
    - name: Harden Runner
      uses: step-security/harden-runner@v2
      with:
        egress-policy: audit

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install Qt6 (Ubuntu - System)
      if: runner.os == 'Linux' && matrix.qt-method == 'system'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          qt6-base-dev qt6-svg-dev qt6-tools-dev \
          libgl1-mesa-dev \
          libxkbcommon-x11-0 \
          libxcb-icccm4 \
          libxcb-image0 \
          libxcb-keysyms1 \
          libxcb-randr0 \
          libxcb-render-util0 \
          libxcb-xinerama0 \
          libxcb-xfixes0 \
          xvfb

    - name: Install Qt6 (macOS - Homebrew)
      if: runner.os == 'macOS' && matrix.qt-method == 'brew'
      run: |
        brew install qt@6
        echo "Qt6_DIR=$(brew --prefix qt@6)/lib/cmake/Qt6" >> $GITHUB_ENV
        echo "PATH=$(brew --prefix qt@6)/bin:$PATH" >> $GITHUB_ENV

    - name: Install Qt6 (Windows - Action)
      if: runner.os == 'Windows' && matrix.qt-method == 'action'
      uses: jurplel/install-qt-action@v4
      with:
        version: ${{ matrix.qt-version }}
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2022_64'
        modules: 'qtsvg qttools'
        cache: true

    - name: Cache XMake
      uses: actions/cache@v4
      with:
        path: |
          ~/.xmake
          .xmake
        key: ${{ runner.os }}-xmake-${{ hashFiles('xmake.lua') }}
        restore-keys: |
          ${{ runner.os }}-xmake-

    - name: Install XMake
      uses: xmake-io/github-action-setup-xmake@v1
      with:
        xmake-version: latest

    - name: Configure XMake
      run: |
        xmake config --mode=${{ matrix.mode }} --examples=true --tests=true --jobs=${{ env.XMAKE_PARALLEL_JOBS }}

    - name: Generate Resources
      run: |
        xmake generate-resources

    - name: Build QtLucide Library
      run: |
        xmake build QtLucide --jobs=${{ env.XMAKE_PARALLEL_JOBS }}

    - name: Build Examples
      run: |
        xmake build QtLucideExample --jobs=${{ env.XMAKE_PARALLEL_JOBS }}
        xmake build QtLucideGallery --jobs=${{ env.XMAKE_PARALLEL_JOBS }}

    - name: Build Tests
      run: |
        xmake build QtLucideTests --jobs=${{ env.XMAKE_PARALLEL_JOBS }}

    - name: Run Tests
      run: |
        ${{ runner.os == 'Linux' && 'xvfb-run -a' || '' }} xmake run QtLucideTests

    - name: Package (Release only)
      if: matrix.mode == 'release'
      run: |
        xmake package

    - name: Upload Artifacts (Release only)
      if: matrix.mode == 'release'
      uses: actions/upload-artifact@v4
      with:
        name: qtlucide-xmake-${{ matrix.os }}-${{ matrix.mode }}
        path: |
          build/
          !build/**/*.o
          !build/**/*.obj
          !build/**/CMakeFiles/
        retention-days: 7

  install-test:
    needs: build
    runs-on: ubuntu-22.04

    steps:
    - name: Harden Runner
      uses: step-security/harden-runner@v2
      with:
        egress-policy: audit

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install Qt6
      run: |
        sudo apt-get update
        sudo apt-get install -y qt6-base-dev qt6-svg-dev qt6-tools-dev libgl1-mesa-dev

    - name: Cache XMake
      uses: actions/cache@v4
      with:
        path: |
          ~/.xmake
          .xmake
        key: ${{ runner.os }}-xmake-install-${{ hashFiles('xmake.lua') }}

    - name: Install XMake
      uses: xmake-io/github-action-setup-xmake@v1
      with:
        xmake-version: latest

    - name: Test Installation
      run: |
        xmake config --mode=release --jobs=${{ env.XMAKE_PARALLEL_JOBS }}
        xmake generate-resources
        xmake build --jobs=${{ env.XMAKE_PARALLEL_JOBS }}
        sudo xmake install --installdir=/tmp/qtlucide-test

    - name: Verify Installation
      run: |
        echo "=== Installation directory structure ==="
        find /tmp/qtlucide-test -type f | head -20
        echo "=== Checking for required files ==="
        ls -la /tmp/qtlucide-test/include/ || echo "No include directory"
        ls -la /tmp/qtlucide-test/lib/ || echo "No lib directory"

    - name: Test installed library
      run: |
        # Create a simple test to verify the installation
        mkdir -p /tmp/test-install
        cd /tmp/test-install
        cat > CMakeLists.txt << 'EOF'
        cmake_minimum_required(VERSION 3.16)
        project(TestInstall)
        set(CMAKE_CXX_STANDARD 17)
        find_package(Qt6 REQUIRED COMPONENTS Core)
        find_package(QtLucide REQUIRED PATHS /tmp/qtlucide-test)
        add_executable(test_install main.cpp)
        target_link_libraries(test_install Qt6::Core QtLucide::QtLucide)
        EOF
        cat > main.cpp << 'EOF'
        #include <QtCore/QCoreApplication>
        int main(int argc, char *argv[]) {
            QCoreApplication app(argc, argv);
            return 0;
        }
        EOF
        cmake -B build -DCMAKE_PREFIX_PATH="/tmp/qtlucide-test"
        cmake --build build || echo "Test build failed, but installation test completed"

  comparison-test:
    runs-on: ubuntu-22.04

    steps:
    - name: Harden Runner
      uses: step-security/harden-runner@v2
      with:
        egress-policy: audit

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install Qt6 and build tools
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          qt6-base-dev qt6-svg-dev qt6-tools-dev \
          libgl1-mesa-dev cmake ninja-build

    - name: Cache build tools
      uses: actions/cache@v4
      with:
        path: |
          ~/.xmake
          .xmake
          cmake-build/CMakeCache.txt
        key: ${{ runner.os }}-comparison-${{ hashFiles('xmake.lua', 'CMakeLists.txt') }}

    - name: Install XMake
      uses: xmake-io/github-action-setup-xmake@v1
      with:
        xmake-version: latest

    - name: Build with CMake
      run: |
        mkdir cmake-build
        cd cmake-build
        cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release \
          -DQTLUCIDE_BUILD_EXAMPLES=ON \
          -DQTLUCIDE_BUILD_TESTS=ON
        ninja -j${{ env.XMAKE_PARALLEL_JOBS }}
        cd ..

    - name: Build with XMake
      run: |
        xmake config --mode=release --jobs=${{ env.XMAKE_PARALLEL_JOBS }}
        xmake generate-resources
        xmake build --jobs=${{ env.XMAKE_PARALLEL_JOBS }}

    - name: Compare Build Results
      run: |
        echo "=== CMake build results ==="
        find cmake-build -name "*QtLucide*" -type f | sort
        echo ""
        echo "=== XMake build results ==="
        find build -name "*QtLucide*" -type f | sort
        echo ""

        # Count library files
        cmake_libs=$(find cmake-build -name "*QtLucide*" -type f | wc -l)
        xmake_libs=$(find build -name "*QtLucide*" -type f | wc -l)

        echo "CMake produced $cmake_libs files"
        echo "XMake produced $xmake_libs files"

        # Check for essential files
        cmake_has_lib=$(find cmake-build -name "*QtLucide*" -type f | grep -E '\.(so|dylib|dll|a|lib)$' | wc -l)
        xmake_has_lib=$(find build -name "*QtLucide*" -type f | grep -E '\.(so|dylib|dll|a|lib)$' | wc -l)

        echo "CMake produced $cmake_has_lib library files"
        echo "XMake produced $xmake_has_lib library files"

        if [ $cmake_has_lib -eq 0 ] || [ $xmake_has_lib -eq 0 ]; then
          echo "ERROR: One of the build systems failed to produce library files"
          exit 1
        fi

        echo "âœ… Both build systems successfully produced library files"

    - name: Generate build comparison report
      run: |
        echo "# Build System Comparison Report" > comparison-report.md
        echo "" >> comparison-report.md
        echo "## CMake Build" >> comparison-report.md
        echo "\`\`\`" >> comparison-report.md
        find cmake-build -name "*QtLucide*" -type f | sort >> comparison-report.md
        echo "\`\`\`" >> comparison-report.md
        echo "" >> comparison-report.md
        echo "## XMake Build" >> comparison-report.md
        echo "\`\`\`" >> comparison-report.md
        find build -name "*QtLucide*" -type f | sort >> comparison-report.md
        echo "\`\`\`" >> comparison-report.md

    - name: Upload comparison report
      uses: actions/upload-artifact@v4
      with:
        name: build-comparison-report
        path: comparison-report.md
        retention-days: 7
